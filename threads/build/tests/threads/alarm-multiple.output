Writing command line to /tmp/gZNOmPtX11.dsk...
squish-pty bochs -q
Kernel command line: -q run alarm-multiple
Pintos booting with 4,096 kB RAM...
374 pages available in kernel pool.
374 pages available in user pool.
Calibrating timer...  102,400 loops/s.
Boot complete.
Executing 'alarm-multiple':
(alarm-multiple) begin
(alarm-multiple) Creating 5 threads to sleep 7 times each.
(alarm-multiple) Thread 0 sleeps 10 ticks each time,
(alarm-multiple) thread 1 sleeps 20 ticks each time, and so on.
(alarm-multiple) If successful, product of iteration count and
(alarm-multiple) sleep duration will appear in nondescending order.
(alarm-multiple) thread 0: duration=10, iteration=1, product=10
(alarm-multiple) thread 1: duration=20, iteration=1, product=20
(alarm-multiple) thread 2: duration=30, iteration=1, product=30
(alarm-multiple) thread 0: duration=10, iteration=2, product=20
(alarm-multiple) FAIL: thread 0 woke up out of order (30 > 20)!
Kernel PANIC at ../../tests/threads/tests.c:93 in fail(): test failed
Call stack: 0xc0107256 0xc0109375 0xc0109647 0xc01093ca 0xc01092ca 0xc010052f 0xc01005f6 0xc010009e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 135 ticks
Thread: 0 idle ticks, 135 kernel ticks, 0 user ticks
Console: 1276 characters output
Keyboard: 0 keys pressed
Powering off...
